/*
* generated by Xtext
*/
grammar InternalP4Dsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.p4dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.p4dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.p4dsl.services.P4DslGrammarAccess;

}

@parser::members {
 
 	private P4DslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(P4DslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getCommandAssignment()); }
(rule__Model__CommandAssignment)*
{ after(grammarAccess.getModelAccess().getCommandAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommand
entryRuleCommand 
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandAccess().getGroup()); }
(rule__Command__Group__0)
{ after(grammarAccess.getCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleP4Command
entryRuleP4Command 
:
{ before(grammarAccess.getP4CommandRule()); }
	 ruleP4Command
{ after(grammarAccess.getP4CommandRule()); } 
	 EOF 
;

// Rule P4Command
ruleP4Command
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getP4CommandAccess().getFileBasedCommandParserRuleCall()); }
	ruleFileBasedCommand
{ after(grammarAccess.getP4CommandAccess().getFileBasedCommandParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFileBasedCommand
entryRuleFileBasedCommand 
:
{ before(grammarAccess.getFileBasedCommandRule()); }
	 ruleFileBasedCommand
{ after(grammarAccess.getFileBasedCommandRule()); } 
	 EOF 
;

// Rule FileBasedCommand
ruleFileBasedCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFileBasedCommandAccess().getAlternatives()); }
(rule__FileBasedCommand__Alternatives)
{ after(grammarAccess.getFileBasedCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdd
entryRuleAdd 
:
{ before(grammarAccess.getAddRule()); }
	 ruleAdd
{ after(grammarAccess.getAddRule()); } 
	 EOF 
;

// Rule Add
ruleAdd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddAccess().getGroup()); }
(rule__Add__Group__0)
{ after(grammarAccess.getAddAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEdit
entryRuleEdit 
:
{ before(grammarAccess.getEditRule()); }
	 ruleEdit
{ after(grammarAccess.getEditRule()); } 
	 EOF 
;

// Rule Edit
ruleEdit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEditAccess().getGroup()); }
(rule__Edit__Group__0)
{ after(grammarAccess.getEditAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDelete
entryRuleDelete 
:
{ before(grammarAccess.getDeleteRule()); }
	 ruleDelete
{ after(grammarAccess.getDeleteRule()); } 
	 EOF 
;

// Rule Delete
ruleDelete
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeleteAccess().getGroup()); }
(rule__Delete__Group__0)
{ after(grammarAccess.getDeleteAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__FileBasedCommand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileBasedCommandAccess().getAddParserRuleCall_0()); }
	ruleAdd
{ after(grammarAccess.getFileBasedCommandAccess().getAddParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFileBasedCommandAccess().getEditParserRuleCall_1()); }
	ruleEdit
{ after(grammarAccess.getFileBasedCommandAccess().getEditParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getFileBasedCommandAccess().getDeleteParserRuleCall_2()); }
	ruleDelete
{ after(grammarAccess.getFileBasedCommandAccess().getDeleteParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Command__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__0__Impl
	rule__Command__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getP4Keyword_0()); }

	'p4' 

{ after(grammarAccess.getCommandAccess().getP4Keyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getP4CommandParserRuleCall_1()); }
	ruleP4Command
{ after(grammarAccess.getCommandAccess().getP4CommandParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Add__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Add__Group__0__Impl
	rule__Add__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddAccess().getAddKeyword_0()); }

	'add' 

{ after(grammarAccess.getAddAccess().getAddKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Add__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Add__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Add__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddAccess().getNameAssignment_1()); }
(rule__Add__NameAssignment_1)
{ after(grammarAccess.getAddAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Edit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Edit__Group__0__Impl
	rule__Edit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Edit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEditAccess().getEditKeyword_0()); }

	'edit' 

{ after(grammarAccess.getEditAccess().getEditKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Edit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Edit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Edit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEditAccess().getNameAssignment_1()); }
(rule__Edit__NameAssignment_1)
{ after(grammarAccess.getEditAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Delete__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Delete__Group__0__Impl
	rule__Delete__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteAccess().getDeleteKeyword_0()); }

	'delete' 

{ after(grammarAccess.getDeleteAccess().getDeleteKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Delete__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Delete__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteAccess().getNameAssignment_1()); }
(rule__Delete__NameAssignment_1)
{ after(grammarAccess.getDeleteAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__CommandAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCommandCommandParserRuleCall_0()); }
	ruleCommand{ after(grammarAccess.getModelAccess().getCommandCommandParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Add__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAddAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Edit__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEditAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEditAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeleteAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDeleteAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


